name: verify

on:
  push:
    paths:
      - 'capsule/**'
      - 'anchors/immutable.json'
      - '.github/workflows/teof-ci.yml'
  pull_request:
    paths:
      - 'capsule/**'
      - 'anchors/immutable.json'
      - '.github/workflows/teof-ci.yml'

permissions:
  contents: read

concurrency:
  group: teof-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Verify capsule hashes
        run: |
          python - <<'PY'
          import os, re, json, hashlib, sys

          def sha256_file(path):
              h = hashlib.sha256()
              with open(path, 'rb') as f:
                  for chunk in iter(lambda: f.read(8192), b''):
                      h.update(chunk)
              return h.hexdigest()

          # Prefer versionless baseline; otherwise fall back to latest vX.Y
          candidates = []
          cur = os.path.join('capsule', 'current', 'hashes.json')
          if os.path.isfile(cur):
              candidates.append(cur)

          vers = []
          cap = 'capsule'
          if os.path.isdir(cap):
              for d in os.listdir(cap):
                  if re.fullmatch(r'v\\d+\\.\\d+', d) and os.path.isfile(os.path.join(cap, d, 'hashes.json')):
                      vers.append(d)
          vers.sort(reverse=True)
          for d in vers:
              candidates.append(os.path.join('capsule', d, 'hashes.json'))

          if not candidates:
              print("Error: no hashes.json found (checked capsule/current and versioned dirs)", file=sys.stderr)
              sys.exit(1)

          baseline = candidates[0]
          print("Using baseline:", baseline)
          with open(baseline, 'r') as f:
              expected = json.load(f)

          ok = True
          for path, exp in expected.items():
              if not os.path.exists(path):
                  print(f"Error: missing file {path}")
                  ok = False
                  continue
              got = sha256_file(path)
              if got != exp:
                  print("Error: Hash mismatch")
                  print(" expected:", exp)
                  print(" got     :", got)
                  print(" file    :", path)
                  ok = False
              else:
                  print("OK", path)

          if not ok:
              sys.exit(1)
          PY

      - name: Validate anchors/immutable.json (schema, append-only, scope vs baseline)
        run: |
          python - <<'PY'
          import json, hashlib, os, sys, subprocess, re

          P = 'anchors/immutable.json'
          if not os.path.exists(P):
              print('Error: anchors/immutable.json not found'); sys.exit(1)

          with open(P, 'r') as f:
              data = json.load(f)

          # Minimal schema
          for k in ['version', 'policy', 'anchors', 'immutable_scope', 'events', 'releases']:
              if k not in data:
                  print(f'Error: missing "{k}"'); sys.exit(1)

          # Compute current + previous hashes
          cur_bytes = open(P,'rb').read()
          cur_sha   = hashlib.sha256(cur_bytes).hexdigest()
          prev_sha  = None
          try:
              prev_bytes = subprocess.check_output(['git','show',f'HEAD~1:{P}'], stderr=subprocess.DEVNULL)
              prev_sha = hashlib.sha256(prev_bytes).hexdigest()
          except subprocess.CalledProcessError:
              pass

          # Append-only: only enforce if the file changed
          if prev_sha and prev_sha != cur_sha:
              last = data['events'][-1] if data['events'] else None
              if not last or last.get('prev_content_hash') != prev_sha:
                  print('Error: events are not append-only compared to previous commit')
                  sys.exit(1)
              else:
                  print('Append-only check: OK (file changed and last.prev_content_hash matches).')
          else:
              print('Append-only check: anchors/immutable.json unchanged in this commit.')

          print(f'anchors/immutable.json sha256={cur_sha}')

          # Scope vs baseline: each immutable path must appear in hashes.json
          candidates = []
          cur = os.path.join('capsule','current','hashes.json')
          if os.path.isfile(cur): candidates.append(cur)
          vers = []
          cap = 'capsule'
          if os.path.isdir(cap):
              for d in os.listdir(cap):
                  if re.fullmatch(r'v\\d+\\.\\d+', d) and os.path.isfile(os.path.join(cap,d,'hashes.json')):
                      vers.append(d)
          vers.sort(reverse=True)
          for d in vers:
              candidates.append(os.path.join('capsule',d,'hashes.json'))
          if not candidates:
              print('Error: no hashes.json found for scope cross-check'); sys.exit(1)

          with open(candidates[0],'r') as f:
              baseline = json.load(f)

          missing = [p for p in data.get('immutable_scope', []) if p not in baseline]
          if missing:
              print('Error: immutable_scope paths missing from baseline hashes.json:')
              for m in missing: print('  -', m)
              sys.exit(1)

          if not data['immutable_scope']:
              print('Warning: immutable_scope is empty')
          PY

      - name: Check for macOS .DS_Store
        run: |
          if git ls-files | grep -q '\.DS_Store'; then
            echo "Error: .DS_Store files committed"
            exit 1
          else
            echo "No .DS_Store files found."
          fi
