#!/usr/bin/env bash
set -euo pipefail

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$ROOT"

section() {
  printf '\n\033[1m[teof-up]\033[0m %s\n' "$1"
}

section "Building distribution artifacts (tools.onboarding.build)"
python3 -m tools.onboarding.build

section "Running guarded quickstart (tools.onboarding.quickstart)"
python3 -m tools.onboarding.quickstart

section "Running quickstart smoke check (scripts/ci/quickstart_smoke.sh)"
./scripts/ci/quickstart_smoke.sh

LATEST_RECEIPT=$(ls -t _report/usage/onboarding/quickstart-*.json 2>/dev/null | head -n 1)
if [[ -n "$LATEST_RECEIPT" ]]; then
  REL_RECEIPT=${LATEST_RECEIPT#"$ROOT"/}
  printf '\nReceipts: %s\n' "$REL_RECEIPT"
fi

printf '\nNext steps (mirror docs/onboarding/README.md):\n'
printf '  0. (If not already) run bin/teof-syscheck to confirm tooling\n'
printf '  1. Read docs/architecture.md\n'
printf '  2. Read docs/workflow.md (Operator ladder sections)\n'
printf '  3. Seat AGENT_MANIFEST.json per docs/agents.md#files-to-know\n'
printf '  4. Inspect %s\n' "${LATEST_RECEIPT:-_report/usage/onboarding/quickstart-<timestamp>.json}"
printf '  5. Run python -m tools.agent.session_boot --agent <id> --focus <role> --with-status\n'
printf '  6. Scaffold a plan via teof-plan new â€¦ --scaffold and capture receipts\n'
printf '  7. Choose work from _plans/next-development.todo.json and seed the bus claim\n'
