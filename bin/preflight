#!/usr/bin/env bash
# Preflight checklist for TEOF. Idempotent, zero-diff on repo (artifacts -> _report/)
# Re-exec under Bash if launched from another shell
if [ -z "${BASH_VERSION:-}" ]; then exec bash "$0" "$@"; fi
set -euo pipefail

# ----- styling -----
if command -v tput >/dev/null 2>&1 && [ -t 1 ]; then
  green=$(tput setaf 2); red=$(tput setaf 1); yellow=$(tput setaf 3); blue=$(tput setaf 6)
  bold=$(tput bold); reset=$(tput sgr0)
else
  green=""; red=""; yellow=""; blue=""; bold=""; reset=""
fi
OK="✅"; WARN="⚠️"; BAD="❌"; INFO="ℹ️"
EXIT=0

say()   { printf "%s\n" "$*"; }
hr()    { printf "%s\n" "------------------------------------------------------------"; }
ok()    { printf "%b %s%b\n"   "$green$OK$reset"   "$*" "$reset"; }
warn()  { printf "%b %s%b\n"   "$yellow$WARN$reset" "$*" "$reset"; }
bad()   { printf "%b %s%b\n"   "$red$BAD$reset"    "$*" "$reset"; EXIT=1; }
info()  { printf "%b %s%b\n"   "$blue$INFO$reset"  "$*" "$reset"; }
step()  { printf "\n%s%s%s\n" "$bold" "$*" "$reset"; }

ART_DIR="_report"
mkdir -p "$ART_DIR"

# ----- detect repo/branch (env overrides) -----
OWNER="${OWNER:-}"
REPO="${REPO:-}"
BRANCH="${BRANCH:-}"

detect_repo() {
  local url path
  : "${BRANCH:=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo main)}"
  if [[ -n "$OWNER" && -n "$REPO" ]]; then
    return
  fi
  url="$(git remote get-url origin 2>/dev/null || true)"
  if [[ -n "$url" ]]; then
    case "$url" in
      git@github.com:*)         path="${url#git@github.com:}";;
      https://github.com/*)     path="${url#*github.com/}";;
      http://github.com/*)      path="${url#*github.com/}";;
      ssh://git@github.com/*)   path="${url#*github.com/}";;
      *)                        path="";;
    esac
    if [[ -n "$path" ]]; then
      path="${path%.git}"
      OWNER="${OWNER:-${path%%/*}}"
      REPO="${REPO:-${path#*/}}"
    fi
  fi
}
detect_repo

printf "\n%sTEOF preflight for %s/%s@%s%s\n" "$bold" "${OWNER:-?}" "${REPO:-?}" "${BRANCH:-?}" "$reset"
hr

# ----- 1) working tree cleanliness (we only write _report/) -----
step "Working tree"
if git diff --quiet --ignore-submodules HEAD -- 2>/dev/null; then
  ok "Git diff vs HEAD: clean"
else
  warn "Git has local changes (that’s fine, preflight won’t touch tracked files)"
fi

# ----- 2) doctor (optional) -----
step "Doctor"
if [[ -x scripts/ops/doctor.sh ]]; then
  if scripts/ops/doctor.sh; then
    ok "scripts/ops/doctor.sh passed"
  else
    bad "doctor reported issues"
  fi
else
  info "no scripts/ops/doctor.sh (skipped)"
fi

# ----- 3) capsule hash audit / append-only audits (optional placeholders) -----
step "Capsule / append-only audits"
if [[ -x scripts/ci/check_layout.sh ]]; then
  if scripts/ci/check_layout.sh; then
    ok "layout checks passed"
  else
    bad "layout checks failed"
  fi
else
  info "no scripts/ci/check_layout.sh (skipped)"
fi

# ----- 4) provider matrix / system prompt artifacts (optional) -----
step "Provider matrix & system prompt (artifacts)"
if [[ -x scripts/ops/build_system_prompt.py ]]; then
  if python3 scripts/ops/build_system_prompt.py > "$ART_DIR/system_prompt-$(git rev-parse --short HEAD 2>/dev/null || echo local).txt"; then
    ok "system prompt artifact written to $ART_DIR/"
  else
    warn "build_system_prompt.py failed (non-fatal)"
  fi
else
  info "no scripts/ops/build_system_prompt.py (skipped)"
fi

# A tiny placeholder matrix: write a “providers list” if present (mock-friendly)
if [[ -x scripts/ops/provider-matrix.sh ]]; then
  if scripts/ops/provider-matrix.sh > "$ART_DIR/providers/matrix-$(date -u +%Y%m%dT%H%M%SZ).md"; then
    ok "provider matrix written to $ART_DIR/providers/"
  else
    warn "provider-matrix.sh failed (non-fatal)"
  fi
else
  info "no scripts/ops/provider-matrix.sh (skipped)"
fi

# ----- 5) markdownlint (non-fatal hygiene) -----
step "Markdown hygiene (non-fatal)"
if command -v markdownlint >/dev/null 2>&1; then
  # ignore build artifacts and the template by default
  tmp_ignore="$(mktemp)"
  printf "_report/\n" >>"$tmp_ignore"
  printf "docs/teps/TEP-0000-template.md\n" >>"$tmp_ignore"
  if markdownlint -q -i _report -i docs/teps/TEP-0000-template.md README.md docs/**/*.md 2>/dev/null; then
    ok "markdownlint: no issues"
  else
    warn "markdownlint reported issues (see above; non-fatal)"
  fi
  rm -f "$tmp_ignore" || true
else
  info "markdownlint not installed (skipped)"
fi

# ----- 6) Branch protection: required status check + strict -----
step "Branch protection (required checks)"
if command -v gh >/dev/null 2>&1 && [[ -n "${OWNER:-}" && -n "${REPO:-}" ]]; then
  # fetch meta and contexts quietly; tolerate missing perms/org policies
  meta="$(gh api -H "Accept: application/vnd.github+json" \
     "repos/$OWNER/$REPO/branches/${BRANCH:-main}/protection/required_status_checks" 2>/dev/null || true)"
  ctxs="$(gh api -H "Accept: application/vnd.github+json" \
     "repos/$OWNER/$REPO/branches/${BRANCH:-main}/protection/required_status_checks/contexts" 2>/dev/null || true)"

  have_teof=""
  strict_val=""
  if [[ -n "$ctxs" && "$ctxs" =~ ^\[ ]]; then
    have_teof="$(python3 - <<'PY' 2>/dev/null || true
import sys, json
try:
  arr = json.load(sys.stdin)
  print("true" if "teof/fitness" in arr else "false")
except: print("")
PY
<<<"$ctxs")"
  fi
  if [[ -n "$meta" && "$meta" =~ ^\{ ]]; then
    strict_val="$(python3 - <<'PY' 2>/dev/null || true
import sys, json
try:
  d = json.load(sys.stdin)
  v = d.get("strict", None)
  if v is True: print("true")
  elif v is False: print("false")
  else: print("")
except: print("")
PY
<<<"$meta")"
  fi

  if [[ "$have_teof" == "true" ]]; then
    ok "required check: teof/fitness present"
  elif [[ -n "$ctxs" ]]; then
    bad "required check: teof/fitness MISSING"
  else
    info "could not read required contexts (no perms/org policy?)"
  fi

  if [[ "$strict_val" == "true" ]]; then
    ok "require up-to-date branches (strict=true)"
  elif [[ "$strict_val" == "false" ]]; then
    warn "strict=false (branches not required to be up-to-date)"
  else
    info "could not read 'strict' (no perms/org policy?)"
  fi
else
  info "gh/OWNER/REPO not available; branch-protection check skipped"
fi

# ----- Summary & exit code -----
hr
if [[ $EXIT -eq 0 ]]; then
  ok "Preflight complete"
else
  bad "Preflight completed with issues"
fi
exit $EXIT
